version: '3.8'

services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - transport-network

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - transport-network
    healthcheck:
      test: ["CMD-SHELL", "kafka-broker-api-versions --bootstrap-server localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    hostname: mongodb
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: transport_system
    volumes:
      - mongodb-data:/data/db
      - ./infrastructure/mongodb/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - transport-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7.2-alpine
    hostname: redis
    container_name: redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis-data:/data
    networks:
      - transport-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka UI for development
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    hostname: kafka-ui
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - transport-network

  # MongoDB Express for development
  mongo-express:
    image: mongo-express:1.0.0
    hostname: mongo-express
    container_name: mongo-express
    depends_on:
      - mongodb
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: password123
      ME_CONFIG_MONGODB_URL: mongodb://admin:password123@mongodb:27017/
      ME_CONFIG_BASICAUTH: false
    networks:
      - transport-network

  # Passenger Service
  passenger-service:
    build:
      context: ./services/passenger-service
      dockerfile: Dockerfile
    hostname: passenger-service
    container_name: passenger-service
    ports:
      - "8001:8080"
    environment:
      - MONGODB_URL=mongodb://admin:password123@mongodb:27017/passenger_db?authSource=admin
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis123@redis:6379
      - JWT_SECRET=passenger_jwt_secret_key_2025
      - SERVICE_PORT=8080
    depends_on:
      - mongodb
      - kafka
      - redis
    networks:
      - transport-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Transport Service
  transport-service:
    build:
      context: ./services/transport-service
      dockerfile: Dockerfile
    hostname: transport-service
    container_name: transport-service
    ports:
      - "8002:8080"
    environment:
      - MONGODB_URL=mongodb://admin:password123@mongodb:27017/transport_db?authSource=admin
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis123@redis:6379
      - SERVICE_PORT=8080
    depends_on:
      - mongodb
      - kafka
      - redis
    networks:
      - transport-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ticketing Service
  ticketing-service:
    build:
      context: ./services/ticketing-service
      dockerfile: Dockerfile
    hostname: ticketing-service
    container_name: ticketing-service
    ports:
      - "8003:8080"
    environment:
      - MONGODB_URL=mongodb://admin:password123@mongodb:27017/ticketing_db?authSource=admin
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis123@redis:6379
      - SERVICE_PORT=8080
    depends_on:
      - mongodb
      - kafka
      - redis
    networks:
      - transport-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Payment Service
  payment-service:
    build:
      context: ./services/payment-service
      dockerfile: Dockerfile
    hostname: payment-service
    container_name: payment-service
    ports:
      - "8004:8080"
    environment:
      - MONGODB_URL=mongodb://admin:password123@mongodb:27017/payment_db?authSource=admin
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis123@redis:6379
      - SERVICE_PORT=8080
    depends_on:
      - mongodb
      - kafka
      - redis
    networks:
      - transport-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    hostname: notification-service
    container_name: notification-service
    ports:
      - "8005:8080"
    environment:
      - MONGODB_URL=mongodb://admin:password123@mongodb:27017/notification_db?authSource=admin
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis123@redis:6379
      - SERVICE_PORT=8080
    depends_on:
      - mongodb
      - kafka
      - redis
    networks:
      - transport-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Admin Service
  admin-service:
    build:
      context: ./services/admin-service
      dockerfile: Dockerfile
    hostname: admin-service
    container_name: admin-service
    ports:
      - "8006:8080"
    environment:
      - MONGODB_URL=mongodb://admin:password123@mongodb:27017/admin_db?authSource=admin
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - REDIS_URL=redis://redis123@redis:6379
      - SERVICE_PORT=8080
    depends_on:
      - mongodb
      - kafka
      - redis
    networks:
      - transport-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  zookeeper-data:
    driver: local
  zookeeper-logs:
    driver: local
  kafka-data:
    driver: local
  mongodb-data:
    driver: local
  redis-data:
    driver: local

networks:
  transport-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
